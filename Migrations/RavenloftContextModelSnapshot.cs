// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ravenloft.Migrations
{
    [DbContext(typeof(RavenloftContext))]
    partial class RavenloftContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("Appearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PageNumbers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("SourceId");

                    b.ToTable("Appearances");
                });

            modelBuilder.Entity("Base", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Base");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ClusterDomain", b =>
                {
                    b.Property<int>("ClustersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClustersId", "DomainsId");

                    b.HasIndex("DomainsId");

                    b.ToTable("ClusterDomain");
                });

            modelBuilder.Entity("DomainItem", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DomainsId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("DomainItem");
                });

            modelBuilder.Entity("DomainLanguage", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguagesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DomainsId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("DomainLanguage");
                });

            modelBuilder.Entity("DomainLocation", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DomainsId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("DomainLocation");
                });

            modelBuilder.Entity("DomainMistway", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MistwaysId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DomainsId", "MistwaysId");

                    b.HasIndex("MistwaysId");

                    b.ToTable("DomainMistway");
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NPCsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DomainsId", "NPCsId");

                    b.HasIndex("NPCsId");

                    b.ToTable("DomainNPC");
                });

            modelBuilder.Entity("ItemLocation", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("ItemLocation");
                });

            modelBuilder.Entity("LanguageNPC", b =>
                {
                    b.Property<int>("LanguagesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NPCsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LanguagesId", "NPCsId");

                    b.HasIndex("NPCsId");

                    b.ToTable("LanguageNPC");
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NPCsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationsId", "NPCsId");

                    b.HasIndex("NPCsId");

                    b.ToTable("LocationNPC");
                });

            modelBuilder.Entity("Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FirstId");

                    b.HasIndex("SecondId");

                    b.HasIndex("SourceId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("Cluster", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SourceId");

                    b.HasDiscriminator().HasValue("Cluster");
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SourceId");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceId")
                                .HasColumnName("Domain_SourceId");
                        });

                    b.HasDiscriminator().HasValue("Domain");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SourceId");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceId")
                                .HasColumnName("Item_SourceId");
                        });

                    b.HasDiscriminator().HasValue("Item");
                });

            modelBuilder.Entity("Language", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SourceId");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceId")
                                .HasColumnName("Language_SourceId");
                        });

                    b.HasDiscriminator().HasValue("Language");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SourceId");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceId")
                                .HasColumnName("Location_SourceId");
                        });

                    b.HasDiscriminator().HasValue("Location");
                });

            modelBuilder.Entity("Mistway", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SourceId");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceId")
                                .HasColumnName("Mistway_SourceId");
                        });

                    b.HasDiscriminator().HasValue("Mistway");
                });

            modelBuilder.Entity("NPC", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ItemId");

                    b.HasIndex("SourceId");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceId")
                                .HasColumnName("NPC_SourceId");
                        });

                    b.HasDiscriminator().HasValue("NPC");
                });

            modelBuilder.Entity("Source", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<string>("Contributors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("Date");

                    b.HasDiscriminator().HasValue("Source");
                });

            modelBuilder.Entity("Trait", b =>
                {
                    b.HasBaseType("Base");

                    b.Property<int?>("DomainId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NPCId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("DomainId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("NPCId");

                    b.HasIndex("SourceId");

                    b.ToTable("Base", t =>
                        {
                            t.Property("ItemId")
                                .HasColumnName("Trait_ItemId");

                            t.Property("SourceId")
                                .HasColumnName("Trait_SourceId");
                        });

                    b.HasDiscriminator().HasValue("Trait");
                });

            modelBuilder.Entity("Appearance", b =>
                {
                    b.HasOne("Base", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("ClusterDomain", b =>
                {
                    b.HasOne("Cluster", null)
                        .WithMany()
                        .HasForeignKey("ClustersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainItem", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLanguage", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLocation", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainMistway", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mistway", null)
                        .WithMany()
                        .HasForeignKey("MistwaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemLocation", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageNPC", b =>
                {
                    b.HasOne("Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Relationship", b =>
                {
                    b.HasOne("NPC", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Source", "Source")
                        .WithMany("Relationships")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Cluster", b =>
                {
                    b.HasOne("Source", null)
                        .WithMany("Clusters")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.HasOne("Source", null)
                        .WithMany("Domains")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.HasOne("Source", null)
                        .WithMany("Items")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Language", b =>
                {
                    b.HasOne("Source", null)
                        .WithMany("Languages")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.HasOne("Source", null)
                        .WithMany("Locations")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Mistway", b =>
                {
                    b.HasOne("Source", null)
                        .WithMany("Mistways")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("NPC", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany("NPCs")
                        .HasForeignKey("ItemId");

                    b.HasOne("Source", null)
                        .WithMany("NPCs")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Trait", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany("Traits")
                        .HasForeignKey("DomainId");

                    b.HasOne("Item", null)
                        .WithMany("ItemTraits")
                        .HasForeignKey("ItemId");

                    b.HasOne("Location", null)
                        .WithMany("Traits")
                        .HasForeignKey("LocationId");

                    b.HasOne("NPC", null)
                        .WithMany("CreatureTraits")
                        .HasForeignKey("NPCId");

                    b.HasOne("Source", null)
                        .WithMany("Traits")
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Navigation("ItemTraits");

                    b.Navigation("NPCs");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("NPC", b =>
                {
                    b.Navigation("CreatureTraits");
                });

            modelBuilder.Entity("Source", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("Domains");

                    b.Navigation("Items");

                    b.Navigation("Languages");

                    b.Navigation("Locations");

                    b.Navigation("Mistways");

                    b.Navigation("NPCs");

                    b.Navigation("Relationships");

                    b.Navigation("Traits");
                });
#pragma warning restore 612, 618
        }
    }
}
