// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ravenloft.Migrations
{
    [DbContext(typeof(RavenloftContext))]
    [Migration("20230828084851_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("Appearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PageNumbers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Source");

                    b.HasKey("Id");

                    b.HasIndex("SourceKey");

                    b.ToTable("Appearances", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Appearance");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("DomainItem", b =>
                {
                    b.Property<string>("DomainsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsKey", "ItemsKey");

                    b.HasIndex("ItemsKey");

                    b.ToTable("DomainItem");
                });

            modelBuilder.Entity("DomainLocation", b =>
                {
                    b.Property<string>("DomainsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsKey", "LocationsKey");

                    b.HasIndex("LocationsKey");

                    b.ToTable("DomainLocation");
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.Property<string>("DomainsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsKey", "NPCsKey");

                    b.HasIndex("NPCsKey");

                    b.ToTable("DomainNPC");
                });

            modelBuilder.Entity("DomainTrait", b =>
                {
                    b.Property<string>("DomainsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TraitsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsKey", "TraitsKey");

                    b.HasIndex("TraitsKey");

                    b.ToTable("DomainTrait");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ItemTrait", b =>
                {
                    b.Property<string>("ItemsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TraitsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemsKey", "TraitsKey");

                    b.HasIndex("TraitsKey");

                    b.ToTable("ItemTrait");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.Property<string>("LocationsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationsKey", "NPCsKey");

                    b.HasIndex("NPCsKey");

                    b.ToTable("LocationNPC");
                });

            modelBuilder.Entity("LocationTrait", b =>
                {
                    b.Property<string>("LocationsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TraitsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationsKey", "TraitsKey");

                    b.HasIndex("TraitsKey");

                    b.ToTable("LocationTrait");
                });

            modelBuilder.Entity("NPC", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("NPCs");
                });

            modelBuilder.Entity("NPCTrait", b =>
                {
                    b.Property<string>("NPCsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TraitsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("NPCsKey", "TraitsKey");

                    b.HasIndex("TraitsKey");

                    b.ToTable("NPCTrait");
                });

            modelBuilder.Entity("Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OtherName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OtherName");

                    b.HasIndex("PrimaryName");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("Source", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Source+Trait", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("SourceTraits");
                });

            modelBuilder.Entity("SourceTrait", b =>
                {
                    b.Property<string>("SourcesKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TraitsKey")
                        .HasColumnType("TEXT");

                    b.HasKey("SourcesKey", "TraitsKey");

                    b.HasIndex("TraitsKey");

                    b.ToTable("SourceTrait");
                });

            modelBuilder.Entity("Trait", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("DomainAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Domain");

                    b.HasIndex("EntityId");

                    b.HasDiscriminator().HasValue("DomainAppearance");
                });

            modelBuilder.Entity("ItemAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Item");

                    b.HasIndex("EntityId");

                    b.HasDiscriminator().HasValue("ItemAppearance");
                });

            modelBuilder.Entity("LocationAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Location");

                    b.HasIndex("EntityId");

                    b.HasDiscriminator().HasValue("LocationAppearance");
                });

            modelBuilder.Entity("NPCAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("NPC");

                    b.HasIndex("EntityId");

                    b.HasDiscriminator().HasValue("NPCAppearance");
                });

            modelBuilder.Entity("Appearance", b =>
                {
                    b.HasOne("Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("DomainItem", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLocation", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainTrait", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemTrait", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationTrait", b =>
                {
                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPCTrait", b =>
                {
                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Relationship", b =>
                {
                    b.HasOne("NPC", "Other")
                        .WithMany("IgnoreThis")
                        .HasForeignKey("OtherName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NPC", "Primary")
                        .WithMany("Relationships")
                        .HasForeignKey("PrimaryName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Other");

                    b.Navigation("Primary");
                });

            modelBuilder.Entity("SourceTrait", b =>
                {
                    b.HasOne("Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Source+Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainAppearance", b =>
                {
                    b.HasOne("Domain", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("ItemAppearance", b =>
                {
                    b.HasOne("Item", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("LocationAppearance", b =>
                {
                    b.HasOne("Location", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("NPCAppearance", b =>
                {
                    b.HasOne("NPC", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("NPC", b =>
                {
                    b.Navigation("IgnoreThis");

                    b.Navigation("Relationships");
                });
#pragma warning restore 612, 618
        }
    }
}
