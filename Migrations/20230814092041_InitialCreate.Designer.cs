// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ravenloft;

#nullable disable

namespace Ravenloft.Migrations
{
    [DbContext(typeof(RavenloftContext))]
    [Migration("20230814092041_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("ClusterDomain", b =>
                {
                    b.Property<string>("ClustersName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ClustersName", "DomainsName");

                    b.HasIndex("DomainsName");

                    b.ToTable("ClusterDomain");
                });

            modelBuilder.Entity("CreatureTraitDomain", b =>
                {
                    b.Property<string>("CreatureTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.HasKey("CreatureTraitsName", "DomainsName");

                    b.HasIndex("DomainsName");

                    b.ToTable("CreatureTraitDomain");
                });

            modelBuilder.Entity("CreatureTraitLocation", b =>
                {
                    b.Property<string>("CreatureTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.HasKey("CreatureTraitsName", "LocationsName");

                    b.HasIndex("LocationsName");

                    b.ToTable("CreatureTraitLocation");
                });

            modelBuilder.Entity("CreatureTraitNPC", b =>
                {
                    b.Property<string>("CreatureTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsName")
                        .HasColumnType("TEXT");

                    b.HasKey("CreatureTraitsName", "NPCsName");

                    b.HasIndex("NPCsName");

                    b.ToTable("CreatureTraitNPC");
                });

            modelBuilder.Entity("DomainDomainTrait", b =>
                {
                    b.Property<string>("DomainTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainTraitsName", "DomainsName");

                    b.HasIndex("DomainsName");

                    b.ToTable("DomainDomainTrait");
                });

            modelBuilder.Entity("DomainItem", b =>
                {
                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsName", "ItemsName");

                    b.HasIndex("ItemsName");

                    b.ToTable("DomainItem");
                });

            modelBuilder.Entity("DomainLocation", b =>
                {
                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsName", "LocationsName");

                    b.HasIndex("LocationsName");

                    b.ToTable("DomainLocation");
                });

            modelBuilder.Entity("DomainMistway", b =>
                {
                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MistwaysName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsName", "MistwaysName");

                    b.HasIndex("MistwaysName");

                    b.ToTable("DomainMistway");
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsName", "NPCsName");

                    b.HasIndex("NPCsName");

                    b.ToTable("DomainNPC");
                });

            modelBuilder.Entity("ItemItemTrait", b =>
                {
                    b.Property<string>("ItemTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemTraitsName", "ItemsName");

                    b.HasIndex("ItemsName");

                    b.ToTable("ItemItemTrait");
                });

            modelBuilder.Entity("ItemLocation", b =>
                {
                    b.Property<string>("ItemsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemsName", "LocationsName");

                    b.HasIndex("LocationsName");

                    b.ToTable("ItemLocation");
                });

            modelBuilder.Entity("LocationLocationTrait", b =>
                {
                    b.Property<string>("LocationTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationTraitsName", "LocationsName");

                    b.HasIndex("LocationsName");

                    b.ToTable("LocationLocationTrait");
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsName")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationsName", "NPCsName");

                    b.HasIndex("NPCsName");

                    b.ToTable("LocationNPC");
                });

            modelBuilder.Entity("Ravenloft.Appearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PageNumbers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityName");

                    b.HasIndex("SourceName");

                    b.ToTable("Appearances");
                });

            modelBuilder.Entity("Ravenloft.Base", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Base");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SourceSourceTrait", b =>
                {
                    b.Property<string>("SourceTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.HasKey("SourceTraitsName", "SourcesName");

                    b.HasIndex("SourcesName");

                    b.ToTable("SourceSourceTrait");
                });

            modelBuilder.Entity("Ravenloft.Cluster", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasIndex("SourceName");

                    b.HasDiscriminator().HasValue("Cluster");
                });

            modelBuilder.Entity("Ravenloft.CreatureTrait", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasIndex("SourceName");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceName")
                                .HasColumnName("CreatureTrait_SourceName");
                        });

                    b.HasDiscriminator().HasValue("CreatureTrait");
                });

            modelBuilder.Entity("Ravenloft.Domain", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasIndex("EventName");

                    b.HasIndex("SourceName");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceName")
                                .HasColumnName("Domain_SourceName");
                        });

                    b.HasDiscriminator().HasValue("Domain");
                });

            modelBuilder.Entity("Ravenloft.DomainTrait", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.HasDiscriminator().HasValue("DomainTrait");
                });

            modelBuilder.Entity("Ravenloft.Event", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Event");
                });

            modelBuilder.Entity("Ravenloft.Item", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("CreatureTraitName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasIndex("CreatureTraitName");

                    b.HasIndex("EventName");

                    b.HasIndex("SourceName");

                    b.ToTable("Base", t =>
                        {
                            t.Property("EventName")
                                .HasColumnName("Item_EventName");

                            t.Property("SourceName")
                                .HasColumnName("Item_SourceName");
                        });

                    b.HasDiscriminator().HasValue("Item");
                });

            modelBuilder.Entity("Ravenloft.ItemTrait", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.HasDiscriminator().HasValue("ItemTrait");
                });

            modelBuilder.Entity("Ravenloft.Location", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasIndex("EventName");

                    b.HasIndex("SourceName");

                    b.ToTable("Base", t =>
                        {
                            t.Property("EventName")
                                .HasColumnName("Location_EventName");

                            t.Property("SourceName")
                                .HasColumnName("Location_SourceName");
                        });

                    b.HasDiscriminator().HasValue("Location");
                });

            modelBuilder.Entity("Ravenloft.LocationTrait", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.HasDiscriminator().HasValue("LocationTrait");
                });

            modelBuilder.Entity("Ravenloft.Mistway", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasIndex("SourceName");

                    b.ToTable("Base", t =>
                        {
                            t.Property("SourceName")
                                .HasColumnName("Mistway_SourceName");
                        });

                    b.HasDiscriminator().HasValue("Mistway");
                });

            modelBuilder.Entity("Ravenloft.NPC", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasIndex("EventName");

                    b.HasIndex("ItemName");

                    b.HasIndex("SourceName");

                    b.ToTable("Base", t =>
                        {
                            t.Property("EventName")
                                .HasColumnName("NPC_EventName");

                            t.Property("SourceName")
                                .HasColumnName("NPC_SourceName");
                        });

                    b.HasDiscriminator().HasValue("NPC");
                });

            modelBuilder.Entity("Ravenloft.Source", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.Property<string>("Contributors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("Date");

                    b.HasDiscriminator().HasValue("Source");
                });

            modelBuilder.Entity("Ravenloft.SourceTrait", b =>
                {
                    b.HasBaseType("Ravenloft.Base");

                    b.HasDiscriminator().HasValue("SourceTrait");
                });

            modelBuilder.Entity("ClusterDomain", b =>
                {
                    b.HasOne("Ravenloft.Cluster", null)
                        .WithMany()
                        .HasForeignKey("ClustersName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTraitDomain", b =>
                {
                    b.HasOne("Ravenloft.CreatureTrait", null)
                        .WithMany()
                        .HasForeignKey("CreatureTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTraitLocation", b =>
                {
                    b.HasOne("Ravenloft.CreatureTrait", null)
                        .WithMany()
                        .HasForeignKey("CreatureTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTraitNPC", b =>
                {
                    b.HasOne("Ravenloft.CreatureTrait", null)
                        .WithMany()
                        .HasForeignKey("CreatureTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainDomainTrait", b =>
                {
                    b.HasOne("Ravenloft.DomainTrait", null)
                        .WithMany()
                        .HasForeignKey("DomainTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainItem", b =>
                {
                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLocation", b =>
                {
                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainMistway", b =>
                {
                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Mistway", null)
                        .WithMany()
                        .HasForeignKey("MistwaysName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemItemTrait", b =>
                {
                    b.HasOne("Ravenloft.ItemTrait", null)
                        .WithMany()
                        .HasForeignKey("ItemTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemLocation", b =>
                {
                    b.HasOne("Ravenloft.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationLocationTrait", b =>
                {
                    b.HasOne("Ravenloft.LocationTrait", null)
                        .WithMany()
                        .HasForeignKey("LocationTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ravenloft.Appearance", b =>
                {
                    b.HasOne("Ravenloft.Base", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("SourceSourceTrait", b =>
                {
                    b.HasOne("Ravenloft.SourceTrait", null)
                        .WithMany()
                        .HasForeignKey("SourceTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ravenloft.Cluster", b =>
                {
                    b.HasOne("Ravenloft.Source", null)
                        .WithMany("Clusters")
                        .HasForeignKey("SourceName");
                });

            modelBuilder.Entity("Ravenloft.CreatureTrait", b =>
                {
                    b.HasOne("Ravenloft.Source", null)
                        .WithMany("CreatureTraits")
                        .HasForeignKey("SourceName");
                });

            modelBuilder.Entity("Ravenloft.Domain", b =>
                {
                    b.HasOne("Ravenloft.Event", null)
                        .WithMany("Domains")
                        .HasForeignKey("EventName");

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany("Domains")
                        .HasForeignKey("SourceName");
                });

            modelBuilder.Entity("Ravenloft.Item", b =>
                {
                    b.HasOne("Ravenloft.CreatureTrait", null)
                        .WithMany("Items")
                        .HasForeignKey("CreatureTraitName");

                    b.HasOne("Ravenloft.Event", null)
                        .WithMany("Items")
                        .HasForeignKey("EventName");

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany("Items")
                        .HasForeignKey("SourceName");
                });

            modelBuilder.Entity("Ravenloft.Location", b =>
                {
                    b.HasOne("Ravenloft.Event", null)
                        .WithMany("Locations")
                        .HasForeignKey("EventName");

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany("Locations")
                        .HasForeignKey("SourceName");
                });

            modelBuilder.Entity("Ravenloft.Mistway", b =>
                {
                    b.HasOne("Ravenloft.Source", null)
                        .WithMany("Mistways")
                        .HasForeignKey("SourceName");
                });

            modelBuilder.Entity("Ravenloft.NPC", b =>
                {
                    b.HasOne("Ravenloft.Event", null)
                        .WithMany("NPCs")
                        .HasForeignKey("EventName");

                    b.HasOne("Ravenloft.Item", null)
                        .WithMany("NPCs")
                        .HasForeignKey("ItemName");

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany("NPCs")
                        .HasForeignKey("SourceName");
                });

            modelBuilder.Entity("Ravenloft.CreatureTrait", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Ravenloft.Event", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("Items");

                    b.Navigation("Locations");

                    b.Navigation("NPCs");
                });

            modelBuilder.Entity("Ravenloft.Item", b =>
                {
                    b.Navigation("NPCs");
                });

            modelBuilder.Entity("Ravenloft.Source", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("CreatureTraits");

                    b.Navigation("Domains");

                    b.Navigation("Items");

                    b.Navigation("Locations");

                    b.Navigation("Mistways");

                    b.Navigation("NPCs");
                });
#pragma warning restore 612, 618
        }
    }
}
