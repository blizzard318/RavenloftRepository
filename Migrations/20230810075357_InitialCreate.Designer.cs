// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ravenloft;

#nullable disable

namespace Ravenloft.Migrations
{
    [DbContext(typeof(RavenloftContext))]
    [Migration("20230810075357_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("ClusterSource", b =>
                {
                    b.Property<string>("ClustersName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.HasKey("ClustersName", "SourcesName");

                    b.HasIndex("SourcesName");

                    b.ToTable("ClusterSource");
                });

            modelBuilder.Entity("CreatureTraitLocation", b =>
                {
                    b.Property<string>("CreatureTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.HasKey("CreatureTraitsName", "LocationsName");

                    b.HasIndex("LocationsName");

                    b.ToTable("CreatureTraitLocation");
                });

            modelBuilder.Entity("CreatureTraitNPC", b =>
                {
                    b.Property<string>("CreatureTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsName")
                        .HasColumnType("TEXT");

                    b.HasKey("CreatureTraitsName", "NPCsName");

                    b.HasIndex("NPCsName");

                    b.ToTable("CreatureTraitNPC");
                });

            modelBuilder.Entity("CreatureTraitSource", b =>
                {
                    b.Property<string>("CreatureTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.HasKey("CreatureTraitsName", "SourcesName");

                    b.HasIndex("SourcesName");

                    b.ToTable("CreatureTraitSource");
                });

            modelBuilder.Entity("DomainEdition", b =>
                {
                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditionsName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsName", "EditionsName");

                    b.HasIndex("EditionsName");

                    b.ToTable("DomainEdition");
                });

            modelBuilder.Entity("DomainMistway", b =>
                {
                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MistwaysName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsName", "MistwaysName");

                    b.HasIndex("MistwaysName");

                    b.ToTable("DomainMistway");
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsName", "NPCsName");

                    b.HasIndex("NPCsName");

                    b.ToTable("DomainNPC");
                });

            modelBuilder.Entity("DomainSource", b =>
                {
                    b.Property<string>("DomainsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsName", "SourcesName");

                    b.HasIndex("SourcesName");

                    b.ToTable("DomainSource");
                });

            modelBuilder.Entity("EditionItem", b =>
                {
                    b.Property<string>("EditionsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsName")
                        .HasColumnType("TEXT");

                    b.HasKey("EditionsName", "ItemsName");

                    b.HasIndex("ItemsName");

                    b.ToTable("EditionItem");
                });

            modelBuilder.Entity("EditionNPC", b =>
                {
                    b.Property<string>("EditionsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsName")
                        .HasColumnType("TEXT");

                    b.HasKey("EditionsName", "NPCsName");

                    b.HasIndex("NPCsName");

                    b.ToTable("EditionNPC");
                });

            modelBuilder.Entity("ItemItemTrait", b =>
                {
                    b.Property<string>("ItemTraitsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemTraitsName", "ItemsName");

                    b.HasIndex("ItemsName");

                    b.ToTable("ItemItemTrait");
                });

            modelBuilder.Entity("ItemLocation", b =>
                {
                    b.Property<string>("ItemsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemsName", "LocationsName");

                    b.HasIndex("LocationsName");

                    b.ToTable("ItemLocation");
                });

            modelBuilder.Entity("ItemSource", b =>
                {
                    b.Property<string>("ItemsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemsName", "SourcesName");

                    b.HasIndex("SourcesName");

                    b.ToTable("ItemSource");
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NPCsName")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationsName", "NPCsName");

                    b.HasIndex("NPCsName");

                    b.ToTable("LocationNPC");
                });

            modelBuilder.Entity("LocationSource", b =>
                {
                    b.Property<string>("LocationsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationsName", "SourcesName");

                    b.HasIndex("SourcesName");

                    b.ToTable("LocationSource");
                });

            modelBuilder.Entity("MistwaySource", b =>
                {
                    b.Property<string>("MistwaysName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.HasKey("MistwaysName", "SourcesName");

                    b.HasIndex("SourcesName");

                    b.ToTable("MistwaySource");
                });

            modelBuilder.Entity("NPCSource", b =>
                {
                    b.Property<string>("NPCsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.HasKey("NPCsName", "SourcesName");

                    b.HasIndex("SourcesName");

                    b.ToTable("NPCSource");
                });

            modelBuilder.Entity("Ravenloft.Canon", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Canons");
                });

            modelBuilder.Entity("Ravenloft.Cluster", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("Ravenloft.CreatureTrait", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EditionName")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.HasIndex("EditionName");

                    b.ToTable("CreatureTraits");
                });

            modelBuilder.Entity("Ravenloft.Domain", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClosedBorders")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClusterName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatureTraitName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Names");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.HasIndex("ClusterName");

                    b.HasIndex("CreatureTraitName");

                    b.HasIndex("ItemName");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Ravenloft.Edition", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("LocationName");

                    b.ToTable("Editions");
                });

            modelBuilder.Entity("Ravenloft.Item", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Ravenloft.ItemTrait", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.HasIndex("SourceName");

                    b.ToTable("ItemTraits");
                });

            modelBuilder.Entity("Ravenloft.Location", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.HasIndex("DomainName");

                    b.HasIndex("LocationName");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Ravenloft.Mistway", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClusterName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.HasIndex("ClusterName");

                    b.ToTable("Mistways");
                });

            modelBuilder.Entity("Ravenloft.NPC", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aliases")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.HasIndex("ItemName");

                    b.ToTable("NPCs");
                });

            modelBuilder.Entity("Ravenloft.Source", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("CanonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contributors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EditionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("CanonName");

                    b.HasIndex("EditionName");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("ClusterSource", b =>
                {
                    b.HasOne("Ravenloft.Cluster", null)
                        .WithMany()
                        .HasForeignKey("ClustersName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTraitLocation", b =>
                {
                    b.HasOne("Ravenloft.CreatureTrait", null)
                        .WithMany()
                        .HasForeignKey("CreatureTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTraitNPC", b =>
                {
                    b.HasOne("Ravenloft.CreatureTrait", null)
                        .WithMany()
                        .HasForeignKey("CreatureTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTraitSource", b =>
                {
                    b.HasOne("Ravenloft.CreatureTrait", null)
                        .WithMany()
                        .HasForeignKey("CreatureTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainEdition", b =>
                {
                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainMistway", b =>
                {
                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Mistway", null)
                        .WithMany()
                        .HasForeignKey("MistwaysName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainSource", b =>
                {
                    b.HasOne("Ravenloft.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EditionItem", b =>
                {
                    b.HasOne("Ravenloft.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EditionNPC", b =>
                {
                    b.HasOne("Ravenloft.Edition", null)
                        .WithMany()
                        .HasForeignKey("EditionsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemItemTrait", b =>
                {
                    b.HasOne("Ravenloft.ItemTrait", null)
                        .WithMany()
                        .HasForeignKey("ItemTraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemLocation", b =>
                {
                    b.HasOne("Ravenloft.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemSource", b =>
                {
                    b.HasOne("Ravenloft.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationSource", b =>
                {
                    b.HasOne("Ravenloft.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MistwaySource", b =>
                {
                    b.HasOne("Ravenloft.Mistway", null)
                        .WithMany()
                        .HasForeignKey("MistwaysName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPCSource", b =>
                {
                    b.HasOne("Ravenloft.NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ravenloft.Cluster", b =>
                {
                    b.HasOne("Ravenloft.Canon", "Canon")
                        .WithMany("Clusters")
                        .HasForeignKey("CanonName");

                    b.Navigation("Canon");
                });

            modelBuilder.Entity("Ravenloft.CreatureTrait", b =>
                {
                    b.HasOne("Ravenloft.Canon", null)
                        .WithMany("CreatureTraits")
                        .HasForeignKey("CanonName");

                    b.HasOne("Ravenloft.Edition", null)
                        .WithMany("CreatureTraits")
                        .HasForeignKey("EditionName");
                });

            modelBuilder.Entity("Ravenloft.Domain", b =>
                {
                    b.HasOne("Ravenloft.Canon", "Canon")
                        .WithMany("Domains")
                        .HasForeignKey("CanonName");

                    b.HasOne("Ravenloft.Cluster", null)
                        .WithMany("Domains")
                        .HasForeignKey("ClusterName");

                    b.HasOne("Ravenloft.CreatureTrait", null)
                        .WithMany("Domains")
                        .HasForeignKey("CreatureTraitName");

                    b.HasOne("Ravenloft.Item", null)
                        .WithMany("Domains")
                        .HasForeignKey("ItemName");

                    b.Navigation("Canon");
                });

            modelBuilder.Entity("Ravenloft.Edition", b =>
                {
                    b.HasOne("Ravenloft.Location", null)
                        .WithMany("Editions")
                        .HasForeignKey("LocationName");
                });

            modelBuilder.Entity("Ravenloft.Item", b =>
                {
                    b.HasOne("Ravenloft.Canon", null)
                        .WithMany("Items")
                        .HasForeignKey("CanonName");
                });

            modelBuilder.Entity("Ravenloft.ItemTrait", b =>
                {
                    b.HasOne("Ravenloft.Canon", null)
                        .WithMany("ItemTraits")
                        .HasForeignKey("CanonName");

                    b.HasOne("Ravenloft.Source", null)
                        .WithMany("ItemTraits")
                        .HasForeignKey("SourceName");
                });

            modelBuilder.Entity("Ravenloft.Location", b =>
                {
                    b.HasOne("Ravenloft.Canon", "Canon")
                        .WithMany("Locations")
                        .HasForeignKey("CanonName");

                    b.HasOne("Ravenloft.Domain", "Domain")
                        .WithMany("Locations")
                        .HasForeignKey("DomainName");

                    b.HasOne("Ravenloft.Location", null)
                        .WithMany("Related")
                        .HasForeignKey("LocationName");

                    b.Navigation("Canon");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("Ravenloft.Mistway", b =>
                {
                    b.HasOne("Ravenloft.Canon", "Canon")
                        .WithMany("Mistways")
                        .HasForeignKey("CanonName");

                    b.HasOne("Ravenloft.Cluster", null)
                        .WithMany("Mistways")
                        .HasForeignKey("ClusterName");

                    b.Navigation("Canon");
                });

            modelBuilder.Entity("Ravenloft.NPC", b =>
                {
                    b.HasOne("Ravenloft.Canon", null)
                        .WithMany("NPCs")
                        .HasForeignKey("CanonName");

                    b.HasOne("Ravenloft.Item", null)
                        .WithMany("NPCs")
                        .HasForeignKey("ItemName");
                });

            modelBuilder.Entity("Ravenloft.Source", b =>
                {
                    b.HasOne("Ravenloft.Canon", "Canon")
                        .WithMany("Sources")
                        .HasForeignKey("CanonName");

                    b.HasOne("Ravenloft.Edition", "Edition")
                        .WithMany("Sources")
                        .HasForeignKey("EditionName");

                    b.Navigation("Canon");

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("Ravenloft.Canon", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("CreatureTraits");

                    b.Navigation("Domains");

                    b.Navigation("ItemTraits");

                    b.Navigation("Items");

                    b.Navigation("Locations");

                    b.Navigation("Mistways");

                    b.Navigation("NPCs");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Ravenloft.Cluster", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("Mistways");
                });

            modelBuilder.Entity("Ravenloft.CreatureTrait", b =>
                {
                    b.Navigation("Domains");
                });

            modelBuilder.Entity("Ravenloft.Domain", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Ravenloft.Edition", b =>
                {
                    b.Navigation("CreatureTraits");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Ravenloft.Item", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("NPCs");
                });

            modelBuilder.Entity("Ravenloft.Location", b =>
                {
                    b.Navigation("Editions");

                    b.Navigation("Related");
                });

            modelBuilder.Entity("Ravenloft.Source", b =>
                {
                    b.Navigation("ItemTraits");
                });
#pragma warning restore 612, 618
        }
    }
}
