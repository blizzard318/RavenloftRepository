// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ravenloft.Migrations
{
    [DbContext(typeof(RavenloftContext))]
    [Migration("20230818152618_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("Appearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PageNumbers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceName");

                    b.ToTable("Appearances", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Appearance");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("DomainItem", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DomainsId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("DomainItem");
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NPCsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DomainsId", "NPCsId");

                    b.HasIndex("NPCsId");

                    b.ToTable("DomainNPC");
                });

            modelBuilder.Entity("DomainTrait", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TraitsName")
                        .HasColumnType("TEXT");

                    b.HasKey("DomainsId", "TraitsName");

                    b.HasIndex("TraitsName");

                    b.ToTable("DomainTrait");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ItemLocation", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("ItemLocation");
                });

            modelBuilder.Entity("ItemNPC", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NPCsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsId", "NPCsId");

                    b.HasIndex("NPCsId");

                    b.ToTable("ItemNPC");
                });

            modelBuilder.Entity("ItemTrait", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TraitsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemsId", "TraitsName");

                    b.HasIndex("TraitsName");

                    b.ToTable("ItemTrait");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DomainId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NPCsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationsId", "NPCsId");

                    b.HasIndex("NPCsId");

                    b.ToTable("LocationNPC");
                });

            modelBuilder.Entity("LocationTrait", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TraitsName")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationsId", "TraitsName");

                    b.HasIndex("TraitsName");

                    b.ToTable("LocationTrait");
                });

            modelBuilder.Entity("NPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NPCs");
                });

            modelBuilder.Entity("NPCTrait", b =>
                {
                    b.Property<int>("NPCsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TraitsName")
                        .HasColumnType("TEXT");

                    b.HasKey("NPCsId", "TraitsName");

                    b.HasIndex("TraitsName");

                    b.ToTable("NPCTrait");
                });

            modelBuilder.Entity("Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OtherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrimaryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OtherId")
                        .IsUnique();

                    b.HasIndex("PrimaryId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("Source", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contributors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("Date");

                    b.HasKey("Name");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("SourceSourceTrait", b =>
                {
                    b.Property<string>("SourcesName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TraitsName")
                        .HasColumnType("TEXT");

                    b.HasKey("SourcesName", "TraitsName");

                    b.HasIndex("TraitsName");

                    b.ToTable("SourceSourceTrait");
                });

            modelBuilder.Entity("SourceTrait", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("SourceTraits");
                });

            modelBuilder.Entity("Trait", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("DomainAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Domain");

                    b.HasIndex("EntityId");

                    b.HasDiscriminator().HasValue("DomainAppearance");
                });

            modelBuilder.Entity("ItemAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Item");

                    b.HasIndex("EntityId");

                    b.HasDiscriminator().HasValue("ItemAppearance");
                });

            modelBuilder.Entity("LocationAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Location");

                    b.HasIndex("EntityId");

                    b.HasDiscriminator().HasValue("LocationAppearance");
                });

            modelBuilder.Entity("NPCAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NPC");

                    b.HasIndex("EntityId");

                    b.HasDiscriminator().HasValue("NPCAppearance");
                });

            modelBuilder.Entity("TraitAppearance", b =>
                {
                    b.HasBaseType("Appearance");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Trait");

                    b.HasIndex("EntityName");

                    b.HasDiscriminator().HasValue("TraitAppearance");
                });

            modelBuilder.Entity("Appearance", b =>
                {
                    b.HasOne("Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("DomainItem", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainNPC", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainTrait", b =>
                {
                    b.HasOne("Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemLocation", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemNPC", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemTrait", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.HasOne("Domain", "Domain")
                        .WithMany("Locations")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("LocationNPC", b =>
                {
                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationTrait", b =>
                {
                    b.HasOne("Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPCTrait", b =>
                {
                    b.HasOne("NPC", null)
                        .WithMany()
                        .HasForeignKey("NPCsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Relationship", b =>
                {
                    b.HasOne("NPC", "Other")
                        .WithOne("IgnoreThis")
                        .HasForeignKey("Relationship", "OtherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NPC", "Primary")
                        .WithMany("Relationships")
                        .HasForeignKey("PrimaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Other");

                    b.Navigation("Primary");
                });

            modelBuilder.Entity("SourceSourceTrait", b =>
                {
                    b.HasOne("Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceTrait", null)
                        .WithMany()
                        .HasForeignKey("TraitsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainAppearance", b =>
                {
                    b.HasOne("Domain", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("ItemAppearance", b =>
                {
                    b.HasOne("Item", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("LocationAppearance", b =>
                {
                    b.HasOne("Location", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("NPCAppearance", b =>
                {
                    b.HasOne("NPC", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("TraitAppearance", b =>
                {
                    b.HasOne("Trait", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("NPC", b =>
                {
                    b.Navigation("IgnoreThis")
                        .IsRequired();

                    b.Navigation("Relationships");
                });
#pragma warning restore 612, 618
        }
    }
}
